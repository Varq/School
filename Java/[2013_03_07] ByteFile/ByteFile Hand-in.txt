/**
 * Write a program to use a byte based file to store the following data.
 * 
 * C = ( W * log10(1+(S/N)) ) / log10(2)
 * 
 * C = Capacity
 * W = Bandwidth
 * S = Signal
 * N = Noise
 * 
 * BW		S/N
 * 520MHz	30dB 20dB 10dB
 * 390MHz	30dB 22dB 18dB
 * 
 * S/N = dB
 * dB = 10*log10(x)
 * 
 * Read the data from the byte based file.
 * Calculate the channel capacity for each set of data.
 * Store the result in a text file.
 * 
 * Compute when there is 2% loss in each case.
 * Compute the average for the first set and second set.
 * 
 * JASON KHAMPHILA
 */

/**
 * Creates a byte file with the repeated format:
 * int bandwidth, int dB1, int dB2, int dB3
 * Entry size = 16
 */

import java.io.*;

public class BandwidthWriter
{
	private String fileName;
	private FileOutputStream fos;
	private BufferedOutputStream bos;
	private DataOutputStream dos;
	
	public BandwidthWriter(String m_fileName) throws FileNotFoundException
	{
		fileName = m_fileName;
		fos = new FileOutputStream(fileName);
		bos = new BufferedOutputStream(fos);
		dos = new DataOutputStream(bos);
	}
	
	public void writeData(int bandwidth, int noise1, int noise2, int noise3) throws IOException
	{
		dos.writeInt(bandwidth);
		dos.writeInt(noise1);
		dos.writeInt(noise2);
		dos.writeInt(noise3);
	}
	
	public void close() throws IOException
	{
		dos.close();
	}
}
===================
/**
 * Creates a byte file using BandwidthWriter.java
 */

import java.io.*;

public class BandwidthTest
{
	public static void main(String[] args) throws IOException
	{
		// Write the bandwidth data to the file
		final int BANDWIDTH_A	= 520;
		final int NOISE_A_1		= 30;
		final int NOISE_A_2		= 20;
		final int NOISE_A_3		= 10;
		
		final int BANDWIDTH_B	= 390;
		final int NOISE_B_1		= 30;
		final int NOISE_B_2		= 22;
		final int NOISE_B_3		= 18;
		
		BandwidthWriter bandWrite = new BandwidthWriter("bandwidth.dat");
		bandWrite.writeData(BANDWIDTH_A, NOISE_A_1, NOISE_A_2, NOISE_A_3);
		bandWrite.writeData(BANDWIDTH_B, NOISE_B_1, NOISE_B_2, NOISE_B_3);
		bandWrite.close();
	}
}
===================
/**
 * A class that stores data and calculates capacity and loss.
 * For use with BandwidthDataAnalyzer.java
 */

public class BandwidthData
{
	private int bandwidth;
	private int[] dbData = new int[3];
	
	public BandwidthData(int m_bandwidth, int m_db1, int m_db2, int m_db3)
	{
		bandwidth = m_bandwidth;
		dbData[0] = m_db1;
		dbData[1] = m_db2;
		dbData[2] = m_db3;
	}
	
	public int getBandwidth()
	{
		return bandwidth;
	}
	
	// Get the dB in the array (array starts at 0)
	public int getDb(int i)
	{
		return dbData[i];
	}
	
	// Calculates the capacity of the bandwidth with a certain dB in the array (array starts at 0)
	public int getCapacity(int i)
	{
		double capacity = (bandwidth * Math.log10(1 + toSignalNoise(dbData[i]))) / Math.log10(2);
		return (int)capacity;
	}
	
	// Calculates the average capacity of all dB entries
	public int getAverageCapacity()
	{
		double average = (getCapacity(0) + getCapacity(1) + getCapacity(2)) / 3;
		return (int)average;
	}
	
	// Calcuates the loss of capacity by percent of a certain dB in the array (array starts at 0)
	public int getLoss(int i, int percent)
	{
		double capacity = getCapacity(i) * ((100 - (double) percent)/100);
		
		return (int)capacity;
	}
	
	// Calculates the average loss of all dB entries
	public int getAverageLoss(int percent)
	{
		double capacity = getAverageCapacity() * ((100 - (double) percent)/100);
		
		return (int)capacity;
	}
	
	// Converts Decibels to Signal/Noise
	public double toSignalNoise(double decibel)
	{
		double sn = 10 * Math.log10(decibel);
		return sn;
	}
	
	// Inverse of toSignalNoise just for completion's sake
	public double toDecibel(double signalNoise)
	{
		double db = Math.pow(10, signalNoise/10);
		return db;
	}
}
===================
/**
 * Main class which runs asks the user for the file to analyze
 * and how much percent loss they would like to calculate.
 * 
 * Analyzes byte files which are created from BandwidthWriter.java
 */
import java.io.*;

public class BandwidthDataAnalyzer
{
	public static void main(String[] args) throws IOException
	{
		// Output text file formatting
		final String TAB_A_1 = "\t|";
		final String TAB_A_2 = "\t\t|";
		final String TAB_B_1 = "\t["; // Unused
		final String TAB_B_2 = "\t\t[";
		final String DB = "dB";
		final String MHZ = "MHz";
		final String BIT_S = "bit/s";
		
		BandwidthData[] data; // Stores data from file
		int numberOfEntries; // Number of entries in file
		File file; // File to read from
		boolean quit = false; // Check if user quits
		int percent; // Percent loss to be calculated
		
		// File input
		FileInputStream fis;
		BufferedInputStream bis;
		DataInputStream dis;
		
		// Text file output
		File outputFile = new File("analysis.txt");
		FileWriter fw = new FileWriter(outputFile);
		BufferedWriter bw = new BufferedWriter(fw);
		PrintWriter pw = new PrintWriter(bw);
		
		// Keyboard stream
		InputStreamReader isr = new InputStreamReader(System.in);
		BufferedReader br = new BufferedReader(isr);
		
		// Ask for file until a valid one is entered or when "quit" is entered
		System.out.print("What file do you want to analyze? ");
		
		file = new File(br.readLine());
		
		 while(!file.exists() || quit)
		{
			System.out.println("File does not exist. Try again or type 'quit' to stop.");
			file = new File(br.readLine());
			
			if(file.getName().equals("quit"))
				quit = true;
		}
		
		// If user enter a filename
		if(!quit)
		{
			// Set up file input stream
			fis = new FileInputStream(file);
			bis = new BufferedInputStream(fis);
			dis = new DataInputStream(bis);
			
			// Get the number of entries in file
			numberOfEntries = getLength(file);
			
			System.out.println("There are " + numberOfEntries + " records.");
			
			// Get the percent loss to be calculated
			System.out.print("How much percent loss do you want to calculate? ");
			String tmp = br.readLine();
			percent = Integer.parseInt(tmp);
			
			// Begin writing to text file
			pw.println("BANDWIDTH" + TAB_A_1 + "DB1" + TAB_A_2 + "DB2" + TAB_A_2 + "DB3" + TAB_A_2 +
					"AVERAGE");
			
			data = new BandwidthData[numberOfEntries];
			
			for(int i = 0; i < numberOfEntries; i++)
			{
				// Store data from file into the array
				int bandwidth = dis.readInt();
				int db1 = dis.readInt();
				int db2 = dis.readInt();
				int db3 = dis.readInt();
				data[i] = new BandwidthData(bandwidth, db1, db2, db3);
				
				// Write data and calculations to output file
				pw.println(">" + data[i].getBandwidth() + MHZ + TAB_B_2 + data[i].getDb(0) + DB +
						TAB_B_2 + data[i].getDb(1) + DB + TAB_B_2 + data[i].getDb(2) + DB + TAB_A_2);
				pw.println("--Capacity:" + TAB_A_1 + data[i].getCapacity(0) + BIT_S + TAB_A_1 +
						data[i].getCapacity(1) + BIT_S + TAB_A_1 + data[i].getCapacity(2) + BIT_S + TAB_A_1 +
						data[i].getAverageCapacity() + BIT_S);
				pw.println("--" + percent + "% Loss:" + TAB_A_1 + data[i].getLoss(0, percent) + BIT_S + TAB_A_1 +
						data[i].getLoss(1, percent) + BIT_S + TAB_A_1 + data[i].getLoss(2, percent) + BIT_S +
						TAB_A_1 + data[i].getAverageLoss(percent) + BIT_S);
			}
			
			System.out.println("Saved to " + outputFile.getName() + "...");
			
			// Close streams
			br.close();
			bw.close();
			dis.close();
		}
	}
	
	// Calculates the number of entries in a file created by BandwidthWriter.java
	public static int getLength(File f)
	{
		int entrySize = 16; // 4 integers = 16
				
		long size = f.length();
		int length = (int) (size/entrySize);
		return length;
	}
}
===================
What file do you want to analyze? bandwidth.dat
There are 2 records.
How much percent loss do you want to calculate? 2
Saved to analysis.txt...
===analysis.txt====
BANDWIDTH	|DB1		|DB2		|DB3		|AVERAGE
>520MHz		[30dB		[20dB		[10dB		|
--Capacity:	|2069bit/s	|1980bit/s	|1798bit/s	|1949bit/s
--2% Loss:	|2027bit/s	|1940bit/s	|1762bit/s	|1910bit/s
>390MHz		[30dB		[22dB		[18dB		|
--Capacity:	|1551bit/s	|1501bit/s	|1466bit/s	|1506bit/s
--2% Loss:	|1519bit/s	|1470bit/s	|1436bit/s	|1475bit/s